!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Graph=t()}(this,(function(){"use strict";class e{constructor(){this.keys=new Set,this.queue=[]}sort(){this.queue.sort((e,t)=>e.priority-t.priority)}set(e,t){const r=Number(t);if(isNaN(r))throw new TypeError('"priority" must be a number');return this.keys.has(e)?this.queue.map(t=>(t.key===e&&Object.assign(t,{priority:r}),t)):(this.keys.add(e),this.queue.push({key:e,priority:r})),this.sort(),this.queue.length}next(){const e=this.queue.shift();return this.keys.delete(e.key),e}isEmpty(){return Boolean(0===this.queue.length)}has(e){return this.keys.has(e)}get(e){return this.queue.find(t=>t.key===e)}}const t={path:[],cost:0};return class{constructor(e){if(this.graph=new Map,e)for(var t in e)for(var r in e[t])this.connect(t,r,e[t][r])}connect(e,t,r){if(!1===this.graph.has(e)){let s=new Map;s.set(t,r),this.graph.set(e,s)}else this.graph.get(e).set(t,r);return this}removeNode(e){return this.graph=function e(t,r){const s=new Map;for(const[i,n]of t)i!==r&&n instanceof Map?s.set(i,e(n,r)):i!==r&&s.set(i,n);return s}(this.graph,e),this}path(r,s,i={}){if(!this.graph.size)return i.cost?t:[];const n=new Set,o=new e,h=new Map;let a=[],u=0,c=[];if(i.avoid&&(c=[].concat(i.avoid)),c.includes(r))throw new Error(`Starting node (${r}) cannot be avoided`);if(c.includes(s))throw new Error(`Ending node (${s}) cannot be avoided`);for(o.set(r,0);!o.isEmpty();){const e=o.next();if(e.key===s){u=e.priority;let t=e.key;for(;h.has(t);)a.push(t),t=h.get(t);break}n.add(e.key);(this.graph.get(e.key)||new Map).forEach((t,r)=>{if(n.has(r)||c.includes(r))return null;if(!o.has(r))return h.set(r,e.key),o.set(r,e.priority+t);const s=o.get(r).priority,i=e.priority+t;return i<s?(h.set(r,e.key),o.set(r,i)):null})}return a.length?(i.trim?a.shift():a=a.concat([r]),i.reverse||(a=a.reverse()),i.cost?{path:a,cost:u}:a):i.cost?t:t.path}closest(e){if(!1===this.graph.has(e))return null;let t=1/0,r=null;return this.graph.get(e).forEach((e,s)=>{e<t&&(r=s,t=e)}),r}}}));
//# sourceMappingURL=index.js.map
