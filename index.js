!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Graph=t()}(this,(function(){"use strict";class e{constructor(){this.keys=new Set,this.queue=[]}sort(){this.queue.sort((e,t)=>e.priority-t.priority)}set(e,t){const r=Number(t);if(isNaN(r))throw new TypeError('"priority" must be a number');return this.keys.has(e)?this.queue.map(t=>(t.key===e&&Object.assign(t,{priority:r}),t)):(this.keys.add(e),this.queue.push({key:e,priority:r})),this.sort(),this.queue.length}next(){const e=this.queue.shift();return this.keys.delete(e.key),e}isEmpty(){return Boolean(0===this.queue.length)}has(e){return this.keys.has(e)}get(e){return this.queue.find(t=>t.key===e)}}function t(e){const r=new Map;return Object.keys(e).forEach(s=>{const n=e[s];if(null!==n&&"object"==typeof n&&!Array.isArray(n))return r.set(s,t(n));if(!function(e){const t=Number(e);return!(isNaN(t)||t<=0)}(n))throw new Error(`Invalid node: ${s}: ${n}`);return r.set(s,Number(n))}),r}function r(e){if(!(e instanceof Map))throw new Error("Invalid graph: Expected Map instead found "+typeof e);e.forEach((e,t)=>{if("object"==typeof e&&e instanceof Map)r(e);else if("number"!=typeof e||e<=0)throw new Error(`Values must be numbers greater than 0. Found value ${e} at ${t}`)})}const s={path:[],cost:0};return class{constructor(e){e instanceof Map?(r(e),this.graph=e):this.graph=e?t(e):new Map}addNode(e,s){let n;return s instanceof Map?(r(s),n=s):n=t(s),this.graph.set(e,n),this}connect(e,t,r){if(!1===this.graph.has(e)){let s=new Map;s.set(t,r),this.graph.set(e,s)}else this.graph.get(e).set(t,r);return this}removeNode(e){return this.graph=function e(t,r){const s=new Map;for(const[n,i]of t)n!==r&&i instanceof Map?s.set(n,e(i,r)):n!==r&&s.set(n,i);return s}(this.graph,e),this}path(t,r,n={}){if(!this.graph.size)return n.cost?s:[];const i=new Set,o=new e,a=new Map;let h=[],u=0,c=[];if(n.avoid&&(c=[].concat(n.avoid)),c.includes(t))throw new Error(`Starting node (${t}) cannot be avoided`);if(c.includes(r))throw new Error(`Ending node (${r}) cannot be avoided`);for(o.set(t,0);!o.isEmpty();){const e=o.next();if(e.key===r){u=e.priority;let t=e.key;for(;a.has(t);)h.push(t),t=a.get(t);break}i.add(e.key);(this.graph.get(e.key)||new Map).forEach((t,r)=>{if(i.has(r)||c.includes(r))return null;if(!o.has(r))return a.set(r,e.key),o.set(r,e.priority+t);const s=o.get(r).priority,n=e.priority+t;return n<s?(a.set(r,e.key),o.set(r,n)):null})}return h.length?(n.trim?h.shift():h=h.concat([t]),n.reverse||(h=h.reverse()),n.cost?{path:h,cost:u}:h):n.cost?s:s.path}}}));
//# sourceMappingURL=index.js.map
