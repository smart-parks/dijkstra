{"version":3,"file":"index.es.js","sources":["libs/PriorityQueue.js","libs/toDeepMap.js","libs/validateDeep.js","libs/Graph.js","libs/removeDeepFromMap.js"],"sourcesContent":["/**\n * This very basic implementation of a priority queue is used to select the\n * next node of the graph to walk to.\n *\n * The queue is always sorted to have the least expensive node on top.\n * Some helper methods are also implemented.\n *\n * You should **never** modify the queue directly, but only using the methods\n * provided by the class.\n */\nexport class PriorityQueue {\n  /**\n   * Creates a new empty priority queue\n   */\n  constructor() {\n    // The `keys` set is used to greatly improve the speed at which we can\n    // check the presence of a value in the queue\n    this.keys = new Set();\n    this.queue = [];\n  }\n\n  /**\n   * Sort the queue to have the least expensive node to visit on top\n   *\n   * @private\n   */\n  sort() {\n    this.queue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Sets a priority for a key in the queue.\n   * Inserts it in the queue if it does not already exists.\n   *\n   * @param {any}     key       Key to update or insert\n   * @param {number}  value     Priority of the key\n   * @return {number} Size of the queue\n   */\n  set(key, value) {\n    const priority = Number(value);\n    if (isNaN(priority)) throw new TypeError('\"priority\" must be a number');\n\n    if (!this.keys.has(key)) {\n      // Insert a new entry if the key is not already in the queue\n      this.keys.add(key);\n      this.queue.push({ key, priority });\n    } else {\n      // Update the priority of an existing key\n      this.queue.map((element) => {\n        if (element.key === key) {\n          Object.assign(element, { priority });\n        }\n\n        return element;\n      });\n    }\n\n    this.sort();\n    return this.queue.length;\n  }\n\n  /**\n   * The next method is used to dequeue a key:\n   * It removes the first element from the queue and returns it\n   *\n   * @return {object} First priority queue entry\n   */\n  next() {\n    const element = this.queue.shift();\n\n    // Remove the key from the `_keys` set\n    this.keys.delete(element.key);\n\n    return element;\n  }\n\n  /**\n   * @return {boolean} `true` when the queue is empty\n   */\n  isEmpty() {\n    return Boolean(this.queue.length === 0);\n  }\n\n  /**\n   * Check if the queue has a key in it\n   *\n   * @param {any} key   Key to lookup\n   * @return {boolean}\n   */\n  has(key) {\n    return this.keys.has(key);\n  }\n\n  /**\n   * Get the element in the queue with the specified key\n   *\n   * @param {any} key   Key to lookup\n   * @return {object}\n   */\n  get(key) {\n    return this.queue.find((element) => element.key === key);\n  }\n}\n","/**\n * Validates a cost for a node\n *\n * @private\n * @param {number} val - Cost to validate\n * @return {bool}\n */\nfunction isValidNode(val) {\n  const cost = Number(val);\n\n  if (isNaN(cost) || cost <= 0) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a deep `Map` from the passed object.\n *\n * @param  {Object} source - Object to populate the map with\n * @return {Map} New map with the passed object data\n */\nexport function toDeepMap(source) {\n  const map = new Map();\n  const keys = Object.keys(source);\n\n  keys.forEach((key) => {\n    const val = source[key];\n\n    if (val !== null && typeof val === \"object\" && !Array.isArray(val)) {\n      return map.set(key, toDeepMap(val));\n    }\n\n    if (!isValidNode(val)) {\n      throw new Error(`Invalid node: ${key}: ${val}`);\n    }\n\n    return map.set(key, Number(val));\n  });\n\n  return map;\n}\n","/**\n * Validate a map to ensure all it's values are either a number or a map\n *\n * @param {Map} map - Map to valiadte\n */\nexport function validateDeep(map) {\n  if (!(map instanceof Map)) {\n    throw new Error(`Invalid graph: Expected Map instead found ${typeof map}`);\n  }\n\n  map.forEach((value, key) => {\n    if (typeof value === \"object\" && value instanceof Map) {\n      validateDeep(value);\n      return;\n    }\n\n    if (typeof value !== \"number\" || value <= 0) {\n      throw new Error(\n        `Values must be numbers greater than 0. Found value ${value} at ${key}`\n      );\n    }\n  });\n}\n","import { PriorityQueue } from \"./PriorityQueue\";\nimport { removeDeepFromMap } from \"./removeDeepFromMap\";\nimport { toDeepMap } from \"./toDeepMap\";\nimport { validateDeep } from \"./validateDeep\";\n\n/** Creates and manages a graph */\nclass Graph {\n  /**\n   * Creates a new Graph, optionally initializing it a nodes graph representation.\n   *\n   * A graph representation is an object that has as keys the name of the point and as values\n   * the points reacheable from that node, with the cost to get there:\n   *\n   *     {\n   *       node (Number|String): {\n   *         neighbor (Number|String): cost (Number),\n   *         ...,\n   *       },\n   *     }\n   *\n   * In alternative to an object, you can pass a `Map` of `Map`. This will\n   * allow you to specify numbers as keys.\n   *\n   * @param {Object|Map} [graph] - Initial graph definition\n   * @example\n   *\n   * const route = new Graph();\n   *\n   * // Pre-populated graph\n   * const route = new Graph({\n   *   A: { B: 1 },\n   *   B: { A: 1, C: 2, D: 4 },\n   * });\n   *\n   * // Passing a Map\n   * const g = new Map()\n   *\n   * const a = new Map()\n   * a.set('B', 1)\n   *\n   * const b = new Map()\n   * b.set('A', 1)\n   * b.set('C', 2)\n   * b.set('D', 4)\n   *\n   * g.set('A', a)\n   * g.set('B', b)\n   *\n   * const route = new Graph(g)\n   */\n  constructor(graph) {\n    if (graph instanceof Map) {\n      validateDeep(graph);\n      this.graph = graph;\n    } else if (graph) {\n      this.graph = toDeepMap(graph);\n    } else {\n      this.graph = new Map();\n    }\n  }\n\n  /**\n   * Adds a node to the graph\n   *\n   * @param {string} name - Name of the node\n   * @param {Object|Map} neighbors - Neighbouring nodes and cost to reach them\n   * @return {this}\n   * @example\n   *\n   * const route = new Graph();\n   *\n   * route.addNode('A', { B: 1 });\n   *\n   * // It's possible to chain the calls\n   * route\n   *   .addNode('B', { A: 1 })\n   *   .addNode('C', { A: 3 });\n   *\n   * // The neighbors can be expressed in a Map\n   * const d = new Map()\n   * d.set('A', 2)\n   * d.set('B', 8)\n   *\n   * route.addNode('D', d)\n   */\n  addNode(name, neighbors) {\n    let nodes;\n    if (neighbors instanceof Map) {\n      validateDeep(neighbors);\n      nodes = neighbors;\n    } else {\n      nodes = toDeepMap(neighbors);\n    }\n\n    this.graph.set(name, nodes);\n\n    return this;\n  }\n\n  /**\n   * @deprecated since version 2.0, use `Graph#addNode` instead\n   */\n  addVertex(name, neighbors) {\n    return this.addNode(name, neighbors);\n  }\n\n  /**\n   * Removes a node and all of its references from the graph\n   *\n   * @param {string|number} key - Key of the node to remove from the graph\n   * @return {this}\n   * @example\n   *\n   * const route = new Graph({\n   *   A: { B: 1, C: 5 },\n   *   B: { A: 3 },\n   *   C: { B: 2, A: 2 },\n   * });\n   *\n   * route.removeNode('C');\n   * // The graph now is:\n   * // { A: { B: 1 }, B: { A: 3 } }\n   */\n  removeNode(key) {\n    this.graph = removeDeepFromMap(this.graph, key);\n\n    return this;\n  }\n\n  /**\n   * Compute the shortest path between the specified nodes\n   *\n   * @param {string}  start     - Starting node\n   * @param {string}  goal      - Node we want to reach\n   * @param {object}  [options] - Options\n   *\n   * @param {boolean} [options.trim]    - Exclude the origin and destination nodes from the result\n   * @param {boolean} [options.reverse] - Return the path in reversed order\n   * @param {boolean} [options.cost]    - Also return the cost of the path when set to true\n   *\n   * @return {array|object} Computed path between the nodes.\n   *\n   *  When `option.cost` is set to true, the returned value will be an object with shape:\n   *    - `path` *(Array)*: Computed path between the nodes\n   *    - `cost` *(Number)*: Cost of the path\n   *\n   * @example\n   *\n   * const route = new Graph()\n   *\n   * route.addNode('A', { B: 1 })\n   * route.addNode('B', { A: 1, C: 2, D: 4 })\n   * route.addNode('C', { B: 2, D: 1 })\n   * route.addNode('D', { C: 1, B: 4 })\n   *\n   * route.path('A', 'D') // => ['A', 'B', 'C', 'D']\n   *\n   * // trimmed\n   * route.path('A', 'D', { trim: true }) // => [B', 'C']\n   *\n   * // reversed\n   * route.path('A', 'D', { reverse: true }) // => ['D', 'C', 'B', 'A']\n   *\n   * // include the cost\n   * route.path('A', 'D', { cost: true })\n   * // => {\n   * //       path: [ 'A', 'B', 'C', 'D' ],\n   * //       cost: 4\n   * //    }\n   */\n  path(start, goal, options = {}) {\n    // Don't run when we don't have nodes set\n    if (!this.graph.size) {\n      if (options.cost) return { path: null, cost: 0 };\n\n      return null;\n    }\n\n    const explored = new Set();\n    const frontier = new PriorityQueue();\n    const previous = new Map();\n\n    let path = [];\n    let totalCost = 0;\n\n    let avoid = [];\n    if (options.avoid) avoid = [].concat(options.avoid);\n\n    if (avoid.includes(start)) {\n      throw new Error(`Starting node (${start}) cannot be avoided`);\n    } else if (avoid.includes(goal)) {\n      throw new Error(`Ending node (${goal}) cannot be avoided`);\n    }\n\n    // Add the starting point to the frontier, it will be the first node visited\n    frontier.set(start, 0);\n\n    // Run until we have visited every node in the frontier\n    while (!frontier.isEmpty()) {\n      // Get the node in the frontier with the lowest cost (`priority`)\n      const node = frontier.next();\n\n      // When the node with the lowest cost in the frontier in our goal node,\n      // we can compute the path and exit the loop\n      if (node.key === goal) {\n        // Set the total cost to the current value\n        totalCost = node.priority;\n\n        let nodeKey = node.key;\n        while (previous.has(nodeKey)) {\n          path.push(nodeKey);\n          nodeKey = previous.get(nodeKey);\n        }\n\n        break;\n      }\n\n      // Add the current node to the explored set\n      explored.add(node.key);\n\n      // Loop all the neighboring nodes\n      const neighbors = this.graph.get(node.key) || new Map();\n      neighbors.forEach((nCost, nNode) => {\n        // If we already explored the node, or the node is to be avoided, skip it\n        if (explored.has(nNode) || avoid.includes(nNode)) return null;\n\n        // If the neighboring node is not yet in the frontier, we add it with\n        // the correct cost\n        if (!frontier.has(nNode)) {\n          previous.set(nNode, node.key);\n          return frontier.set(nNode, node.priority + nCost);\n        }\n\n        const frontierPriority = frontier.get(nNode).priority;\n        const nodeCost = node.priority + nCost;\n\n        // Otherwise we only update the cost of this node in the frontier when\n        // it's below what's currently set\n        if (nodeCost < frontierPriority) {\n          previous.set(nNode, node.key);\n          return frontier.set(nNode, nodeCost);\n        }\n\n        return null;\n      });\n    }\n\n    // Return null when no path can be found\n    if (!path.length) {\n      if (options.cost) return { path: null, cost: 0 };\n\n      return null;\n    }\n\n    // From now on, keep in mind that `path` is populated in reverse order,\n    // from destination to origin\n\n    // Remove the first value (the goal node) if we want a trimmed result\n    if (options.trim) {\n      path.shift();\n    } else {\n      // Add the origin waypoint at the end of the array\n      path = path.concat([start]);\n    }\n\n    // Reverse the path if we don't want it reversed, so the result will be\n    // from `start` to `goal`\n    if (!options.reverse) {\n      path = path.reverse();\n    }\n\n    // Return an object if we also want the cost\n    if (options.cost) {\n      return {\n        path,\n        cost: totalCost,\n      };\n    }\n\n    return path;\n  }\n\n  /**\n   * @deprecated since version 2.0, use `Graph#path` instead\n   */\n  shortestPath(...args) {\n    return this.path(...args);\n  }\n}\n\nexport default Graph;\n","/**\n * Removes a key and all of its references from a map.\n * This function has no side-effects as it returns\n * a brand new map.\n *\n * @param {Map}     map - Map to remove the key from\n * @param {string}  key - Key to remove from the map\n * @return {Map}    New map without the passed key\n */\nexport function removeDeepFromMap(map, key) {\n  const newMap = new Map();\n\n  for (const [aKey, val] of map) {\n    if (aKey !== key && val instanceof Map) {\n      newMap.set(aKey, removeDeepFromMap(val, key));\n    } else if (aKey !== key) {\n      newMap.set(aKey, val);\n    }\n  }\n\n  return newMap;\n}\n"],"names":["PriorityQueue","[object Object]","this","keys","Set","queue","sort","a","b","priority","key","value","Number","isNaN","TypeError","has","map","element","Object","assign","add","push","length","shift","delete","Boolean","find","toDeepMap","source","Map","forEach","val","Array","isArray","set","cost","isValidNode","Error","validateDeep","graph","name","neighbors","nodes","addNode","removeDeepFromMap","newMap","aKey","start","goal","options","size","path","explored","frontier","previous","totalCost","avoid","concat","includes","isEmpty","node","next","nodeKey","get","nCost","nNode","frontierPriority","nodeCost","trim","reverse","args"],"mappings":"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"}